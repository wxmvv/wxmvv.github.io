
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>wxm&#39;s Blog</title>
      <link>https://wxmvv.github.io/blog</link>
      <description>Developer</description>
      <language>zh-cn</language>
      <managingEditor>w05172075@outlook.com (wxm)</managingEditor>
      <webMaster>w05172075@outlook.com (wxm)</webMaster>
      <lastBuildDate>Sat, 16 Nov 2024 00:00:00 GMT</lastBuildDate>
      <atom:link href="https://wxmvv.github.io/feed.xml" rel="self" type="application/rss+xml"/>
      
  <item>
    <guid>https://wxmvv.github.io/blog/blog_new/blog新的动画，你发现没有？</guid>
    <title>20241116 blog新的动画，你发现没有？</title>
    <link>https://wxmvv.github.io/blog/blog_new/blog新的动画，你发现没有？</link>
    <description>&lt;p&gt;页面出现的线性的动画，之前在刚开始重构 blog 时就想实现，不过因为当时比较忙，就暂时搁置了，最近有空，就还是使用 motion 库来实现一下。&lt;/p&gt;
&lt;h2&gt;需要实现的效果&lt;/h2&gt;
&lt;p&gt;页面元素依次出现，首先是过渡动画包括 opacity blur X 这三部分的变化，并且需要有一个 delay 的效果，让元素一个一个的出现。&lt;/p&gt;
&lt;h2&gt;实现思路&lt;/h2&gt;
&lt;p&gt;opacity blur X 这种变化，使用 motion 实现十分简单，甚至用原生 js 也很简单，问题在于 delay 的效果。页面有很多元素 甚至包括需要渲染的列表，如果一个一个添加恐怕是十分浪费时间。&lt;/p&gt;
&lt;p&gt;花了一点时间仔细查了 motion 的文档，发现一个好东西 &lt;code&gt;staggerChildren&lt;/code&gt; (&lt;a href=&quot;https://motion.dev/docs/react-transitions&quot;&gt;文档&lt;/a&gt;) ,使用这个配合 &lt;code&gt;variants&lt;/code&gt; 属性，可以轻松实现元素和子元素的依次出现。&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;p&gt;先新建一个 &lt;code&gt;motionVariants.tsx&lt;/code&gt; 组件重复调用。在其中定义 &lt;code&gt;containerVariants&lt;/code&gt; 和 &lt;code&gt;itemVariants&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;export const containerVariants = {
    hidden: {
        opacity: 0,
        filter: &amp;quot;blur(8px)&amp;quot;,
        transform: &amp;quot;translateY(16px) translateZ(0)&amp;quot;,
    },
    visible: {
        opacity: 1,
        filter: &amp;quot;blur(0)&amp;quot;,
        transform: &amp;quot;none&amp;quot;,
        transition: {
            transform: { duration: 0.4, timeConstant: 750 },
            opacity: { duration: 0.7, timeConstant: 350 },
            filter: { duration: 0.8, timeConstant: 350 },
            type: &amp;quot;tween&amp;quot;,
            duration: 0.6,
            ease: [0.25, 0.3, 0.5, 1],
            delayChildren: 0,
            //   staggerChildren: 0.12, // 每个子项之间的延迟时间
            staggerChildren: 0.08, // 每个子项之间的延迟时间
        },
    },
};
export const itemVariants = {
    hidden: {
        opacity: 0,
        filter: &amp;quot;blur(8px)&amp;quot;,
        transform: &amp;quot;translateY(16px) translateZ(0)&amp;quot;,
        transition: {},
    },
    visible: {
        opacity: 1,
        filter: &amp;quot;blur(0)&amp;quot;,
        transform: &amp;quot;none&amp;quot;,
        transition: {
            transform: { duration: 0.2, timeConstant: 350 },
            opacity: { duration: 0.4, timeConstant: 350 },
            filter: { duration: 0.4, timeConstant: 350 },
            duration: 0.4,
            ease: [0.25, 0.3, 0.5, 1],
        },
    },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在你的组件中添加效果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { motion } from &amp;#39;framer-motion&amp;#39;
import { containerVariants, itemVariants } from &amp;#39;@/components/MyMotion&amp;#39;
  return (
    &amp;lt;&amp;gt;
      &amp;lt;motion.div variants={containerVariants} initial=&amp;quot;hidden&amp;quot; animate=&amp;quot;visible&amp;quot;&amp;gt;
          &amp;lt;motion.div variants={itemVariants}&amp;gt;
            &amp;lt;h2&amp;gt;title&amp;lt;/h2&amp;gt;
          &amp;lt;/motion.div&amp;gt;
          &amp;lt;motion.div variants={itemVariants}&amp;gt;
            &amp;lt;p&amp;gt;body&amp;lt;/p&amp;gt;
          &amp;lt;/motion.div&amp;gt;
          &amp;lt;motion.div variants={itemVariants}&amp;gt;
            &amp;lt;p&amp;gt;link&amp;lt;/p&amp;gt;
          &amp;lt;/motion.div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;最终效果&lt;/h2&gt;
&lt;div className=&quot;flex flex-row justify-center bg-zinc-100 rounded-sm &quot;&gt;
  &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;my-0 rounded&quot;&gt;
    &lt;source src=&quot;/static/video/blog新的动画.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
&lt;/div&gt;
</description>
    <pubDate>Sat, 16 Nov 2024 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>code</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/blog_new/markdown文档规范</guid>
    <title>开始写markdown文档之前你也许会需要看一下的排版规范</title>
    <link>https://wxmvv.github.io/blog/blog_new/markdown文档规范</link>
    <description>&lt;h1&gt;markdown 文档排版规范&lt;/h1&gt;
&lt;p&gt;最近我在写文档，但是对比自己写的文档和 github 上其他大佬写的文档，总觉得差了很多意思，也许是时候学习下如何去写文档了，于是找到了 github 的文档规范 &lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GFM&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文档地址：&lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GMF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;花了一些时间看过之后，觉得确实很有学习的必要，也挑选了一些更容易碰到用到的规范，写出来供大家参考，也让自己能够经常回顾。&lt;/p&gt;
&lt;p&gt;我也在知乎找到了&amp;quot;物联网学前班&amp;quot;这篇文章 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/144446995&quot;&gt;基于 Markdown 的中文文档排版规范&lt;/a&gt;，其中也有一些关于中文的排版建议，我个人觉得很有帮助，所以也一并分享出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/work.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
    <pubDate>Fri, 15 Nov 2024 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>markdown</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/macos/AppleScript实现鼠标连点</guid>
    <title>20241013 AppleScript实现鼠标连点</title>
    <link>https://wxmvv.github.io/blog/macos/AppleScript实现鼠标连点</link>
    <description>&lt;h1&gt;AppleScript 中实现鼠标与键盘自动连点&lt;/h1&gt;
&lt;p&gt;因为最近在玩一个老游戏，开了作弊但是还需要手动点击才能升级，于是使用 applescript 来实现一下自动点击。&lt;/p&gt;
&lt;h2&gt;事前准备&lt;/h2&gt;
&lt;p&gt;鼠标点击使用 cliclick 包,可以使用 brew 安装 &lt;code&gt;brew install cliclick&lt;/code&gt; 键盘则直接使用 applescript 即可&lt;/p&gt;
&lt;h2&gt;脚本实现&lt;/h2&gt;
&lt;h3&gt;鼠标点击&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;-- 定义点击位置,点击次数,点击间隔
set x to 615
set y to 461
set clickNum to 1000
set clickNum to 0.4
-- 执行点击
repeat clickNum times
do shell script &amp;quot;/usr/local/bin/cliclick c:&amp;quot; &amp;amp; x &amp;amp; &amp;quot;,&amp;quot; &amp;amp; y
delay delayNum -- 调整延迟以控制点击速度
end repeat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用步骤如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;然后通过命令行&lt;code&gt;cliclick p&lt;/code&gt;获取你想点击的位置&lt;/li&gt;
&lt;li&gt;填入 x,y,clickNum,clickNum 四个变量,运行即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也可以配合电脑中的 shortcut 来实现快捷键启动&lt;/p&gt;
&lt;h3&gt;键盘输入&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;输入文字&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;-- 定义输入内容
set inputText to &amp;quot;hello world&amp;quot;
-- 执行输入
tell application &amp;quot;System Events&amp;quot;
    keystroke inputText
end tell
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;模拟键盘按键&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;-- 激活目标应用，比如 Safari
tell application &amp;quot;Safari&amp;quot;
    activate
end tell

-- 设置按键组合的次数和延迟
set pressCount to 10 -- 重复次数
set delayTime to 0.1 -- 每次按键后的延迟（秒）

-- 模拟键盘连按
repeat pressCount times
    tell application &amp;quot;System Events&amp;quot;
        key code 49 -- 这里的 49 是空格键的 keycode
        delay delayTime
    end tell
end repeat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中的 keycode 是对应键盘的键码,可以通过&lt;code&gt;System Events&lt;/code&gt;中的&lt;code&gt;key code&lt;/code&gt;来使用, &lt;a href=&quot;https://web.archive.org/web/20100501161453/http://www.classicteck.com/rbarticles/mackeyboard.php&quot;&gt;keycode&lt;/a&gt; 在这里可以查看 keycode 列表,顺便我也在下面也列出一些常用按键的键码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;键&lt;/th&gt;
&lt;th&gt;键码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backspace&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空格&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Escape&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Caps Lock&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方向左&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方向右&lt;/td&gt;
&lt;td&gt;124&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方向下&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方向上&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20100501161453/http://www.classicteck.com/rbarticles/mackeyboard.php&quot;&gt;keycode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-SW15&quot;&gt;AppleScript Language Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    <pubDate>Sun, 13 Oct 2024 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>code</category><category>applescript</category><category>macos</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/capacitor/使用Capacitor来构建你的app吧！</guid>
    <title>使用Capacitor来构建你的app吧！</title>
    <link>https://wxmvv.github.io/blog/capacitor/使用Capacitor来构建你的app吧！</link>
    <description>&lt;h1&gt;尝试使用 Capacitor 来丰富你的 app 吧！&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://capacitorjs.com&quot;&gt;capacitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;capacitor 作为一个跨平台 ios 和安卓的框架，本身和 flutter、RN 并不是同一赛道，capacitor 在官网也清晰的写着，基于两个平台 webview 来展示你的 html 静态网站，我们可以先用各种框架如 vue、react 来写一个静态网站，然后使用 capacitor 来把它变成 app，或者仅仅把它当成一个 app 的扩展工具，用 js 库来实现一些原生不太好实现的功能。相比直接用 capacitor 来构建 app，把它作为一个 js 扩展应该是一个更好的选择。&lt;/p&gt;
&lt;h2&gt;简单尝试&lt;/h2&gt;
&lt;h3&gt;随便新建一个项目&lt;/h3&gt;
&lt;p&gt;我这里新建了一个 nextjs 项目。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npx create-next-app@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;记得在 next.config 中设定 output。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;output: &amp;quot;export&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;安装 Capacitor&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 安装cap命令
npm install @capacitor/cli @capacitor/core
# 新建cap项目
npx cap init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以看到目录中出现了 capacitor.config.json
下面有一个简单的设置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;appId&amp;quot;: &amp;quot;com.example.captest&amp;quot;, //唯一id
    &amp;quot;appName&amp;quot;: &amp;quot;captest&amp;quot;,
    &amp;quot;webDir&amp;quot;: &amp;quot;out&amp;quot;, //这个是静态网站的位置，nextjs导出的静态页面在out文件夹
    &amp;quot;server&amp;quot;: {
        &amp;quot;url&amp;quot;: &amp;quot;http://127.0.0.1:3000&amp;quot;, //这里设定是对应nextjs dev模式的端口，设定后可以热更新
        &amp;quot;cleartext&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;安装 cap 对应 sdk&lt;/h3&gt;
&lt;p&gt;这里以 ios 项目为例，&lt;/p&gt;
&lt;p&gt;这里特别说一下在 ios 开发中需要安装 cocoapods，如果正常安装出错可以使用 brew 安装，我有个专门的日志写了如何解决这个问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 先把nextjs的预览打开
npm run dev
# 安装cap包
npm install @capacitor/ios @capacitor/android
# 添加ios支持
npx cap add ios
# 使用原生app xcode打开app,可以查看原生代码，然后编译在模拟器执行
npx cap open ios
# 或者不打开xocde 通过命令行直接编译
npx cap run ios
# 可以打开同步，这样就可以热更新了
npx cap sync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/capacitor/capacitor%E9%A2%84%E8%A7%881.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样一个可预览的 nextjs 的 app 就出来啦～&lt;/p&gt;
&lt;p&gt;是不是很简单～&lt;/p&gt;
&lt;p&gt;不过对比 flutter 和 RN 速度上明显还是有差距，还是要根据具体情况使用。&lt;/p&gt;
</description>
    <pubDate>Sun, 11 Aug 2024 20:47:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>capacitor</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/capacitor/解决安装cocoapods失败的问题</guid>
    <title>解决安装cocoapods失败的问题</title>
    <link>https://wxmvv.github.io/blog/capacitor/解决安装cocoapods失败的问题</link>
    <description>&lt;p&gt;最近在尝试使用 capacitor 制作 ios app，涉及到使用 cocoapods 来安装插件，但是 macos 安装会出现各种问题，经过查看各种方法，最后还是使用 brew 成功的。&lt;/p&gt;
&lt;p&gt;其实主要问题在于 macos 自带的 ruby 版本比较低，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ruby --version
# 查看ruby版本 如果是2.6那说明你需要这个教程
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;首先使用 brew 安装 ruby&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# 安装ruby
brew install ruby
# 配置PATH
echo &amp;#39;export PATH=&amp;quot;/usr/local/opt/ruby/bin:$PATH&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
echo &amp;#39;export LDFLAGS=&amp;quot;-L/usr/local/opt/ruby/lib&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
echo &amp;#39;export CPPFLAGS=&amp;quot;-I/usr/local/opt/ruby/include&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
# 重新加载配置
source ~/.zshrc
# 再次查看ruby版本 这时候应该变成3.x了
ruby --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;安装 pod&lt;/h3&gt;
&lt;p&gt;这里仍然使用 brew 来安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install cocoapods
# 按照提示link
brew link cocoapods
# 这里如果提示已经存在，需要按照brew给出的方法删除原文件，并再次链接
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# 正常显示没有报错就ok了
pod env
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/12122&quot;&gt;cocoapods issues&lt;/a&gt;&lt;/p&gt;
</description>
    <pubDate>Sun, 11 Aug 2024 13:15:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>ios</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/Note/ukulele/SmileInTheMorning</guid>
    <title>名渡山辽-Smile in the morning指弹谱</title>
    <link>https://wxmvv.github.io/blog/Note/ukulele/SmileInTheMorning</link>
    <description>&lt;p&gt;虽然很久没弹琴，也没制作谱子了，赶上这次名渡山来天津的机会，再次拿起来练一下。&lt;/p&gt;
&lt;p&gt;就挑了一首他的新曲来练一下。刚好骑鹅尤克里里的伊老师也在扒这首曲子，我们就一起合作完成谱子的整理，放在这里。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/static/pdf/ukulele/smileinthemorning.pdf&quot;&gt;smileinthemorning.pdf&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?isOutside=true&amp;aid=1355658592&amp;bvid=BV1Xz421b7FU&amp;cid=1574676110&amp;p=1&amp;autoplay=0&amp;muted=0&quot; className=&#39;w-full h-[366px]&#39; scrolling=&quot;no&quot; border=&quot;0&quot; frameBorder=&quot;no&quot; autoPlay=&quot;0&quot; muted=&quot;0&quot; framespacing=&quot;0&quot; allowFullScreen={true}&gt;&lt;/iframe&gt;
</description>
    <pubDate>Tue, 16 Jul 2024 10:17:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>music</category><category>ukulele</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/js/Nextjs重构主页</guid>
    <title>2024年使用Nextjs重构主页</title>
    <link>https://wxmvv.github.io/blog/js/Nextjs重构主页</link>
    <description>&lt;p&gt;最近在使用 Nextjs 完成工作，用的很舒服，遂决定用来重构许久不动的主页&lt;/p&gt;
&lt;h2&gt;技术选择&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tailwindcss.com/&quot;&gt;tailwindcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nextjs.org/&quot;&gt;Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先是框架，除了 Nextjs 之外，我平时也很常用的 tailwindcss，可以快速构建网站页面。
经过查找最后决定使用&amp;quot;开箱即用&amp;quot;的 &lt;a href=&quot;https://github.com/timlrx/tailwind-nextjs-starter-blog&quot;&gt;tailwind-nextjs-starter-blog&lt;/a&gt;作为基础来重构主页。&lt;/p&gt;
&lt;h2&gt;设计参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nelson.co/&quot;&gt;nelson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很喜欢这种干净的页面，但是同时又有不少小设计，作为参考来制作。&lt;/p&gt;
&lt;h2&gt;未完成&lt;/h2&gt;
&lt;p&gt;#todo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; BlogLayout 修改&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;strong&gt;MDX 样式修改&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 动画优化&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 字体&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 评论系统&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; i18n 国际化&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; rss 生成&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 添加音乐支持&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 音乐播放器动画&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; PDF 预览&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;问题与一些解决方案&lt;/h2&gt;
&lt;h3&gt;favicons 以及 manifest&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Manifest&quot;&gt;MDN 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elegantapp/pwa-asset-generator&quot;&gt;pwa-asset-generator 工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;动效框架&lt;/h3&gt;
&lt;p&gt;页面的动画效果使用的&lt;a href=&quot;https://www.framer.com/motion/&quot;&gt;framer-motion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;能打打节省开发动画的时间,并且让动画的过渡更加丝滑。&lt;/p&gt;
&lt;p&gt;不得不说和 vue 相比，react 的动画库真的多太多了。&lt;/p&gt;
&lt;h3&gt;github page 静态部署&lt;/h3&gt;
&lt;p&gt;关于静态部署如何设置，在文档中写的很清楚&lt;a href=&quot;https://github.com/timlrx/tailwind-nextjs-starter-blog&quot;&gt;tailwind-nextjs-starter-blog&lt;/a&gt;，设置过就可以 build 了。&lt;/p&gt;
&lt;p&gt;唯一需要注意的是，github page 使用 jekyll 部署，会自动忽略下划线开头的文件，导致_next 文件夹中的 js css 无法加载，在其中新建一个.nojekyll 即可&lt;/p&gt;
&lt;h3&gt;meta 信息&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&quot;https://gohugo.io/content-management/front-matter/&quot;&gt;Hugo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;过滤 Post 的修改&lt;/h3&gt;
&lt;p&gt;在修改 Post 过滤过程中，其实就是 daaft 设置为 true，在 dev 模式还能正常显示，在 build 模式就会消失，如果想要做一些修改 可以搜索一个外部方法 allCoreContent ，这个方法会在 NODE_ENV 为 production 的时候过滤掉 draft 修改。然后做自己的修改即可。&lt;/p&gt;
&lt;h2&gt;评论系统&lt;/h2&gt;
&lt;p&gt;tailwind-nextjs-starter-blog 所提供的 comments 组件似乎有一些加载问题，所以最后还是自己解决吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://giscus.app/&quot;&gt;giscus&lt;/a&gt;
&lt;a href=&quot;https://github.com/giscus/giscus-component&quot;&gt;giscus-react&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i @giscus/react
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;//作为组件中使用  现在giscus官网获取id 然后将下面替换即可
import Giscus from &amp;quot;@giscus/react&amp;quot;;
export default function MyApp() {
    return (
        &amp;lt;Giscus
            id=&amp;quot;comments&amp;quot;
            repo=&amp;quot;giscus/giscus-component&amp;quot;
            repoId=&amp;quot;MDEwOlJlcG9zaXRvcnkzOTEzMTMwMjA=&amp;quot;
            category=&amp;quot;Announcements&amp;quot;
            categoryId=&amp;quot;DIC_kwDOF1L2fM4B-hVS&amp;quot;
            mapping=&amp;quot;specific&amp;quot;
            term=&amp;quot;Welcome to @giscus/react component!&amp;quot;
            reactionsEnabled=&amp;quot;1&amp;quot;
            emitMetadata=&amp;quot;0&amp;quot;
            inputPosition=&amp;quot;top&amp;quot;
            theme=&amp;quot;light&amp;quot;
            lang=&amp;quot;en&amp;quot;
            loading=&amp;quot;lazy&amp;quot;
        /&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;build 后的中文路径问题&lt;/h3&gt;
&lt;p&gt;我在 dev 模式中没有问题，但是当我打包 build 后出现路径问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app/blog/[...slug]/page.tsx
const isDev = process.env.NODE_ENV === &amp;quot;development&amp;quot;;
const isBuild = process.env.NEXT_PUBLIC_IS_BUILD === &amp;quot;true&amp;quot;;
export const generateStaticParams = async () =&amp;gt; {
    if (isDev) {
        return allBlogs.map((p) =&amp;gt; ({
            slug: p.slug.split(&amp;quot;/&amp;quot;).map((name) =&amp;gt; encodeURIComponent(name)),
        }));
    } else {
        return allBlogs.map((p) =&amp;gt; ({
            slug: p.slug.split(&amp;quot;/&amp;quot;).map((name) =&amp;gt; decodeURI(name)),
        }));
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// next.config.js
const isDev = process.env.NODE_ENV === &amp;#39;development&amp;#39;
const isBuild =process.env.NODE_ENV === &amp;#39;production&amp;#39; &amp;amp;&amp;amp; process.env.NEXT_PUBLIC_IS_BUILD === &amp;#39;true&amp;#39;
env: {
    NEXT_PUBLIC_IS_BUILD: isBuild.toString(),
},
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// package.json
&amp;quot;scripts&amp;quot;:{
    &amp;quot;build&amp;quot;: &amp;quot;cross-env NEXT_PUBLIC_IS_BUILD=true &amp;amp;&amp;amp; cross-env INIT_CWD=$PWD next build &amp;amp;&amp;amp; cross-env NODE_OPTIONS=&amp;#39;--experimental-json-modules&amp;#39; node ./scripts/postbuild.mjs&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;有疑问可以邮件联系我。&lt;/p&gt;
</description>
    <pubDate>Fri, 05 Jul 2024 18:26:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>Nextjs</category><category>react</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/markdown/mdx常用元素</guid>
    <title>mdx常用元素</title>
    <link>https://wxmvv.github.io/blog/markdown/mdx常用元素</link>
    <description>&lt;p&gt;这里是一些常用 mdx 元素&lt;/p&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TOCInline toc={props.toc} exclude=&amp;quot;Introduction&amp;quot; /&amp;gt;&lt;/code&gt;
&lt;TOCInline toc={props.toc} exclude=&quot;Introduction&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;B 站视频&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;iframe
    src=&amp;quot;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=1355658592&amp;amp;bvid=BV1Xz421b7FU&amp;amp;cid=1574676110&amp;amp;p=1&amp;amp;muted=false&amp;quot;
    className=&amp;quot;w-full h-[342px]&amp;quot;
    autoPlay
    scrolling=&amp;quot;no&amp;quot;
    border=&amp;quot;0&amp;quot;
    frameBorder=&amp;quot;no&amp;quot;
    framespacing=&amp;quot;0&amp;quot;
    allowFullScreen={true}
&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?isOutside=true&amp;aid=1355658592&amp;bvid=BV1Xz421b7FU&amp;cid=1574676110&amp;p=1&amp;muted=false&quot; className=&#39;w-full h-[342px]&#39; autoPlay scrolling=&quot;no&quot; border=&quot;0&quot; frameBorder=&quot;no&quot; framespacing=&quot;0&quot; allowFullScreen={true}&gt;&lt;/iframe&gt;

&lt;h2&gt;markdown 图片&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;![测试图片](/static/test.webp))&lt;/code&gt;
&lt;img src=&quot;/static/test.webp&quot; alt=&quot;测试图片&quot;&gt;&lt;/p&gt;
&lt;h2&gt;mdx 图片(宽)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div className=&amp;quot;flex flex-row justify-center bg-zinc-100  rounded md:-mx-28&amp;quot;&amp;gt;
    &amp;lt;img alt=&amp;quot;GitHub test&amp;quot; loading=&amp;quot;lazy&amp;quot; width=&amp;quot;2000&amp;quot; height=&amp;quot;1000&amp;quot; decoding=&amp;quot;async&amp;quot; data-nimg=&amp;quot;1&amp;quot; className=&amp;quot;my-0 rounded&amp;quot; srcSet=&amp;quot;&amp;quot; src=&amp;quot;/static/test2.webp&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div className=&quot;flex flex-row justify-center bg-zinc-100  rounded md:-mx-28&quot;&gt;
  &lt;Image alt=&quot;GitHub test&quot; loading=&quot;lazy&quot; width=&quot;2000&quot; height=&quot;1000&quot; decoding=&quot;async&quot; data-nimg=&quot;1&quot; className=&quot;my-0 rounded&quot; srcSet=&quot;&quot; src=&quot;/static/test2.webp&quot; /&gt;
&lt;/div&gt;

&lt;h2&gt;mdx 视频(普通)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div className=&amp;quot;flex flex-row justify-center bg-zinc-100 rounded-sm &amp;quot;&amp;gt;
    &amp;lt;video autoPlay loop preload=&amp;quot;auto&amp;quot; playsInline className=&amp;quot;my-0 rounded&amp;quot;&amp;gt;
        &amp;lt;source src=&amp;quot;/static/test.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;
    &amp;lt;/video&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div className=&quot;flex flex-row justify-center bg-zinc-100 rounded-sm &quot;&gt;
  &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;my-0 rounded&quot;&gt;
    &lt;source src=&quot;/static/test.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
&lt;/div&gt;

&lt;h2&gt;mdx 视频(宽)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div className=&amp;quot;flex flex-row justify-center bg-zinc-100 rounded-sm md:-mx-28&amp;quot;&amp;gt;
  &amp;lt;video autoPlay loop preload=&amp;quot;auto&amp;quot; playsInline className=&amp;quot;my-0 rounded&amp;quot;&amp;gt;
    &amp;lt;source src=&amp;quot;/static/test.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot; /&amp;gt;
  &amp;lt;/video&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div className=&quot;flex flex-row justify-center bg-zinc-100 rounded-sm md:-mx-28&quot;&gt;
  &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;rounded my-0&quot;&gt;
    &lt;source src=&quot;/static/test.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
&lt;/div&gt;

&lt;h2&gt;链接&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;https://google.com&amp;quot; target=&amp;quot;blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;a href=&quot;https://google.com&quot; target=&quot;blank&quot;&gt;前往谷歌&lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;布局&lt;/h2&gt;
&lt;h3&gt;两列布局(宽)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div className=&amp;quot;grid gap-6 md:grid-cols-2 md:-mx-24&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div className=&quot;grid gap-6 md:grid-cols-2 md:-mx-24&quot;&gt;
  &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
      &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;my-0 rounded-md md:max-h-[540px]&quot;&gt;
          &lt;source src=&quot;/static/test.mp4&quot; type=&quot;video/mp4&quot; /&gt;
      &lt;/video&gt;
      &lt;div className=&quot;flex flex-col px-2 pt-2&quot;&gt;
          &lt;div&gt;Github Test&lt;/div&gt;
          &lt;div className=&quot;imgDesc parent flex flex-col my-0 space-y-0 text-zinc-400&quot;&gt;
           Github Test Github Test Github Test Github Test Github Test Github Test
          &lt;/div&gt;
      &lt;/div&gt;
  &lt;/div&gt;
  &lt;div className =&quot;col-span-2&quot;&gt;
    &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
      &lt;a href=&quot;https://google.com&quot; target=&quot;blank&quot;&gt;
        &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;my-0 rounded-md md:max-h-[540px]&quot;&gt;
          &lt;source src=&quot;/static/test.mp4&quot; type=&quot;video/mp4&quot; /&gt;
        &lt;/video&gt;
      &lt;/a&gt;
      &lt;div className=&quot;flex flex-col px-2 pt-2&quot;&gt;
      &lt;div className=&quot;my-0&quot;&gt;Github Test&lt;/div&gt;
      &lt;div className=&quot;imgDesc my-0 text-zinc-400&quot;&gt;
        Github Test Github Test Github Test Github Test Github Test Github Test
      &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;两列布局(窄)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div className=&amp;quot;flex flex-col gap-6 md:grid md:grid-cols-2&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div className=&quot;flex flex-col gap-6 md:grid md:grid-cols-2&quot;&gt;
  &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
      &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;my-0 rounded-md md:max-h-[540px]&quot;&gt;
          &lt;source src=&quot;/static/test.mp4&quot; type=&quot;video/mp4&quot; /&gt;
      &lt;/video&gt;
      &lt;div className=&quot;flex flex-col px-2 pt-2&quot;&gt;
          &lt;div&gt;Github Test&lt;/div&gt;
          &lt;div className=&quot;imgDesc text-zinc-400&quot;&gt;
            Github Test Github Test Github Test Github Test Github Test Github Test Github Test
          &lt;/div&gt;
      &lt;/div&gt;
  &lt;/div&gt;
  &lt;div className =&quot;col-span-2&quot;&gt;
    &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
      &lt;a href=&quot;https://google.com&quot; target=&quot;blank&quot;&gt;
        &lt;video autoPlay loop preload=&quot;auto&quot; playsInline className=&quot;my-0 rounded-md md:max-h-[540px]&quot;&gt;
          &lt;source src=&quot;/static/test.mp4&quot; type=&quot;video/mp4&quot; /&gt;
        &lt;/video&gt;
      &lt;/a&gt;
      &lt;div className=&quot;flex flex-col px-2 pt-2&quot;&gt;
      &lt;div className=&quot;my-0&quot;&gt;Github Test&lt;/div&gt;
      &lt;div className=&quot;imgDesc my-0 text-zinc-400&quot;&gt;
       Github Test Github Test Github Test Github Test Github Test Github Test Github Test
      &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;item 单列&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div className=&amp;quot;flex flex-col gap-2&amp;quot;&amp;gt;
    &amp;lt;video autoPlay loop preload=&amp;quot;auto&amp;quot; playsInline className=&amp;quot;my-0 rounded-md md:max-h-[540px]&amp;quot;&amp;gt;
        &amp;lt;source src=&amp;quot;/static/test.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot; /&amp;gt;
    &amp;lt;/video&amp;gt;
    &amp;lt;div className=&amp;quot;flex flex-col px-2 pt-2&amp;quot;&amp;gt;
        &amp;lt;div&amp;gt;Github Test&amp;lt;/div&amp;gt;
        &amp;lt;div className=&amp;quot;imgDesc text-zinc-400&amp;quot;&amp;gt;
         Github Test Github Test Github Test Github Test Github Test Github Test Github Test
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;item 双列&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div className =&amp;quot;col-span-2&amp;quot;&amp;gt;
  &amp;lt;div className=&amp;quot;flex flex-col gap-2&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://google.com&amp;quot; target=&amp;quot;blank&amp;quot;&amp;gt;
      &amp;lt;video autoPlay loop preload=&amp;quot;auto&amp;quot; playsInline className=&amp;quot;my-0 rounded-md md:max-h-[540px]&amp;quot;&amp;gt;
        &amp;lt;source src=&amp;quot;/static/test.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot; /&amp;gt;
      &amp;lt;/video&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;div className=&amp;quot;flex flex-col px-2 pt-2&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;Github Test&amp;lt;/div&amp;gt;
    &amp;lt;div className=&amp;quot;imgDesc text-zinc-400&amp;quot;&amp;gt;
      Github Test Github Test Github Test Github Test Github Test Github Test
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    <pubDate>Fri, 05 Jul 2024 18:26:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>markdown</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/Note/最近在学习sketch来设计原型</guid>
    <title>最近在学习sketch来设计原型</title>
    <link>https://wxmvv.github.io/blog/Note/最近在学习sketch来设计原型</link>
    <description>&lt;p&gt;在学习间隙写一些最近的感想&lt;/p&gt;
&lt;p&gt;我也是从最开始的编程小白一路走来，学习编程的过程中，我也走过很多弯路，到现在也快四年了，今天也随便写点东西&lt;/p&gt;
&lt;h2&gt;我在学习编程的过程中额外学习了哪些技能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;做项目计划&lt;/li&gt;
&lt;li&gt;项目谈判&lt;/li&gt;
&lt;li&gt;设计&lt;/li&gt;
&lt;li&gt;excel 表和 BI 报表的基础&lt;/li&gt;
&lt;li&gt;PS 图片，简单的图片处理&lt;/li&gt;
&lt;li&gt;设计 Logo 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;为什么会学习各种技能&lt;/h2&gt;
&lt;p&gt;原因还是因为缺少经费.只能自己学习来减少预算...
不过在学习中，我也知道了很多。
各个科目中互相融合的部分，我也能更好地去理解了。&lt;/p&gt;
&lt;h2&gt;其他感想&lt;/h2&gt;
&lt;p&gt;不论什么软件开发，在这些日子的学习中，我逐渐才发现，“编程”不过是一种工具，而解决对方问题才是真正重要的。&lt;/p&gt;
&lt;p&gt;不管怎样的程序或者其他什么的东西，都是一定要落地的，考虑到实际情况的，这个才是最重要的。&lt;/p&gt;
</description>
    <pubDate>Sun, 17 Mar 2024 16:40:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>note</category><category>diary</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/swiftUI/SwiftUI获取屏幕宽高</guid>
    <title>SwiftUI获取屏幕宽高</title>
    <link>https://wxmvv.github.io/blog/swiftUI/SwiftUI获取屏幕宽高</link>
    <description>&lt;p&gt;在 ios 中如果需要做一些页面，如抽屉侧边栏，就需要获得屏幕宽度，那么如何获取呢？&lt;/p&gt;
&lt;p&gt;以下是两种方式：&lt;/p&gt;
&lt;h2&gt;通过 GeometryReader 获取&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GeometryReader&lt;/code&gt;包装器提供了对父视图几何信息的访问，从而使你能够根据视图的实际大小来设置内容，当设备横置或者纵置，也会跟随动态调整。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView: View {
    var body: some View {
        GeometryReader { geo in
            Text(&amp;quot;Screen Width: \(geo.size.width)&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;通过 UIScreen 获取&lt;/h2&gt;
&lt;p&gt;UIScreen.main.bounds 将返回设备的逻辑宽度，不考虑横置或纵置的情况,包含 width 和 height 等信息，如果需要获取实际物理宽高 也可以使用 UIScreen.main.nativeBounds.width&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// 通过 UIScreen.main.bounds.width 来获得宽度
struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Screen Width: \(UIScreen.main.bounds.width)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;如果需要考虑横纵就必须使用 GeometryReader
其他情况就随意喽。&lt;/p&gt;
</description>
    <pubDate>Sun, 19 Nov 2023 21:04:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>swift</category><category>swiftUI</category><category>ios</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/macos/Macos隐藏与显示文件</guid>
    <title>Macos隐藏文件&amp;显示隐藏文件</title>
    <link>https://wxmvv.github.io/blog/macos/Macos隐藏与显示文件</link>
    <description>&lt;h2&gt;macos 命令使用 chflags&lt;/h2&gt;
&lt;p&gt;最近在使用 obsidian 的时候，出现了文件会变成隐藏，目前原因不明，最后使用 chflags nohidden 命令将它们取消隐藏。&lt;/p&gt;
&lt;p&gt;使用 man chflags 可以了解大致使用方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;#常用指令
chflags hidden  # 隐藏单一文件或文件夹
chflags nohidden # 取消隐藏单一文件或文件夹
chflags -R hidden # 隐藏或取消隐藏目录所有文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还有官方论坛相关的回答&lt;a href=&quot;https://discussionschinese.apple.com/thread/250178608&quot;&gt;url&lt;/a&gt;&lt;/p&gt;
</description>
    <pubDate>Thu, 16 Nov 2023 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>macos</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/macos/Arc浏览器使用体会</guid>
    <title>Arc浏览器使用体会</title>
    <link>https://wxmvv.github.io/blog/macos/Arc浏览器使用体会</link>
    <description>&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;把总结放在前面：
我的使用 arc 浏览器的感觉就是两个字：&lt;strong&gt;舒服！&lt;/strong&gt;（个人观点仅供参考）
优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外观花哨（有好有坏吧）&lt;/li&gt;
&lt;li&gt;画架功能&lt;/li&gt;
&lt;li&gt;快捷键可以实现更简单的分屏，新页面等等&lt;/li&gt;
&lt;li&gt;调试方便&lt;/li&gt;
&lt;li&gt;多用户切换方便
缺点：&lt;/li&gt;
&lt;li&gt;性能开销大（笔记本可能会影响续航，如果外出还是 safari）&lt;/li&gt;
&lt;li&gt;有一些 bug（比如总是提示翻译网页）&lt;/li&gt;
&lt;li&gt;没有书签功能（对应的 pin 功能，不过很难用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新奇的设计和花哨的外观，真的可以先体验一下，看看适不适合你。
当然如果习惯不同也不要勉强，适合自己的才是对的。&lt;/p&gt;
&lt;h2&gt;心路历程&lt;/h2&gt;
&lt;p&gt;其实我很早就有关注到这个浏览器，也早早参与了测试（好像是 2021 年吧，有点模糊），不过当时第一次打开然后 CPU 飙升，风扇狂扇，本来清爽的 macbook 直接煎蛋，给我留下了不小的心理阴影，然后惊恐的删掉了。
这次偶然间在 b 站看到有人推荐，看着让人舒适的界面，我最后还是下载了使用。之前的发热问题也没了（可能也和系统版本有关），可以使用了。&lt;/p&gt;
&lt;h2&gt;常用快捷键&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;command+s&lt;/td&gt;
&lt;td&gt;打开左侧 siderbar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+⬆️+=&lt;/td&gt;
&lt;td&gt;新建分屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+数字&lt;/td&gt;
&lt;td&gt;切换空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command+数字&lt;/td&gt;
&lt;td&gt;切换空间中的页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command+⬆️+L&lt;/td&gt;
&lt;td&gt;打开资料库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command+⬆️+C&lt;/td&gt;
&lt;td&gt;复制当前 url&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command+W&lt;/td&gt;
&lt;td&gt;关闭当前页面(设置里叫归档)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command+F&lt;/td&gt;
&lt;td&gt;搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command+L&lt;/td&gt;
&lt;td&gt;打开 command 输入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;画架&lt;/h2&gt;
&lt;p&gt;我觉得 arc 最优秀的功能就是这个画架！如果你有用 arc 一定要尝试！！&lt;/p&gt;
</description>
    <pubDate>Sat, 04 Nov 2023 14:47:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>应用推荐</category><category>chrome</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/swiftUI/StarlightDiary重构开始</guid>
    <title>我的项目StarlightDiary重构开始</title>
    <link>https://wxmvv.github.io/blog/swiftUI/StarlightDiary重构开始</link>
    <description>&lt;h2&gt;重构快乐 🎉！&lt;/h2&gt;
&lt;p&gt;最近在忙很多各种各样的工作(大多数小程序以及前端项目)，最近终于闲下来一点，看着自己过去做的这个日记 App 实在是惨不忍睹，正好就重构一下，而且 SwiftUI 经过快两年的更新也加入了不少东西，都一起来用一下吧！&lt;/p&gt;
&lt;h2&gt;项目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wxmvv/StarlightDiary&quot;&gt;StarLightDiary&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;主要重构方向&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新的 UI 界面，blingbling 的 ✨&lt;/li&gt;
&lt;li&gt;更多的设定（字体，色彩）&lt;/li&gt;
&lt;li&gt;markdown 支持&lt;/li&gt;
&lt;li&gt;ICloud 的支持&lt;/li&gt;
&lt;li&gt;Mac 支持（看情况）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他要说的&lt;/h2&gt;
&lt;p&gt;也许可以顺便把之前定下的流程经验教学安排一下？&lt;/p&gt;
</description>
    <pubDate>Wed, 01 Nov 2023 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>swift</category><category>swiftUI</category><category>ios</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/golang/goframe开发学习系列/goframe开发学习（一）基础流程</guid>
    <title>goframe开发学习（一）基础流程开发一个API</title>
    <link>https://wxmvv.github.io/blog/golang/goframe开发学习系列/goframe开发学习（一）基础流程</link>
    <description>&lt;p&gt;我是一名普普通通的前端程序员，并没有进过大厂工作，也不太了解各种设计模式，之前只用过 flask，或者一些 serverless 的项目做一些简单的后端程序。第一次使用 goframe 的我其实也是有点一头雾水，看什么设计模式云里雾里，不过摸索了一阵子后，发现里面确实有很多设计方面的思想，不一定能用上，但是了解了也是很有帮助的（比如面试哈哈 😂），总是学习是让人快乐的！&lt;/p&gt;
&lt;p&gt;下面直接进入主题，我会用最精炼的步骤来开发，如果我的学习分享能给你帮助或者有任何问题，都欢迎留言或邮件联系我。&lt;/p&gt;
&lt;h2&gt;开发准备&lt;/h2&gt;
&lt;h3&gt;安装 goframe&lt;/h3&gt;
&lt;h3&gt;初始化项目设置&lt;/h3&gt;
&lt;h2&gt;开发流程！重要 gf-v2.5&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;设计数据库&lt;/li&gt;
&lt;li&gt;设置(dao，数据库等)&lt;ul&gt;
&lt;li&gt;在 main.go 中加入一行 _ &amp;quot;github.com/gogf/gf/contrib/drivers/mysql/v2&amp;quot; （如果你使用的是 mysql；只需写一次）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gf gen dao 生成对应的 dao/do/model&lt;/li&gt;
&lt;li&gt;编写 api 层：定义业务侧数据结构，提供对外接口的输入/输出数据结构&lt;/li&gt;
&lt;li&gt;gf gen ctrl 生成对应的 controller&lt;/li&gt;
&lt;li&gt;编写 model 层：定义数据侧数据结构，提供对内的数据处理的输入/输出数据结构&lt;/li&gt;
&lt;li&gt;编写 logic 层，自动生成 service 层代码&lt;ul&gt;
&lt;li&gt;在 main.go 中 加入一行 _ &amp;quot;project-name/internal/logic&amp;quot; （只需写一次）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gf gen service 生成对应的 service&lt;/li&gt;
&lt;li&gt;编写 controller 层，接收/解析用户输入的参数，调用 service 层的服务&lt;/li&gt;
&lt;li&gt;在 cmd.go 中注册路由&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;详细&lt;/h2&gt;
&lt;p&gt;然后是分别详解对应步骤，我只会把和 goframe 相关的写出来，像数据库设计这种，请自己找资料学习。&lt;/p&gt;
&lt;h3&gt;1.设计数据库&lt;/h3&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给需要的表添加&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;`created_at` datetime DEFAULT NULL COMMENT &amp;#39;创建时间&amp;#39;,
`updated_at` datetime DEFAULT NULL COMMENT &amp;#39;修改时间&amp;#39;,
`deleted_at` datetime DEFAULT NULL COMMENT &amp;#39;删除时间&amp;#39;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://goframe.org/pages/viewpage.action?pageId=84103192&quot;&gt;官方参考&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;4.编写 api&lt;/h3&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用指针类型的属性参数，用于实现：当传递该参数时执行修改，不传递时不修改。(具体可以看&lt;a href=&quot;https://goframe.org/pages/viewpage.action?pageId=84103192&quot;&gt;官方参考&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要参考文档:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://goframe.org/pages/viewpage.action?pageId=47703679&quot;&gt;g.Meta 使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://goframe.org/pages/viewpage.action?pageId=93880327&quot;&gt;官方文档编写规范&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// MARK:你好 顺便获取全部管理员
// 收到的请求request的格式
type Admin_HelloReq struct {
    g.Meta `path:&amp;quot;/jkmap/admin/_hello&amp;quot; tags:&amp;quot;Admin&amp;quot; method:&amp;quot;get&amp;quot; summary:&amp;quot;🌟 Hello 拿来吧你全部admin&amp;quot;`
}
// 返回的response格式
type Admin_HelloRes struct {
    Hello string `json:&amp;quot;hello&amp;quot; dc:&amp;quot;你好世界&amp;quot;`
    AdminList *[]model.AdminAll `json:&amp;quot;admin_list&amp;quot; dc:&amp;quot;拿来吧你&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;6.编写 model&lt;/h3&gt;
&lt;p&gt;其实就是各种数据类型都可以放在这里，一般是 input output 的数据类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;//有没有发现 其实API中也是这么写的，所以model其实也可以用于API编写中
//
type AdminAll struct {
    Admin_id int `json:&amp;quot;admin_id&amp;quot;`
    Role_id int `json:&amp;quot;role_id&amp;quot;`
    Name string `json:&amp;quot;name&amp;quot;`
    Password string `json:&amp;quot;password&amp;quot;`
    Salt string `json:&amp;quot;salt&amp;quot;`
    Status string `json:&amp;quot;status&amp;quot;`
    Nick_name string `json:&amp;quot;nick_name&amp;quot;`
    Email string `json:&amp;quot;email&amp;quot;`
    Phonenumber string `json:&amp;quot;phonenumber&amp;quot;`
    Sex string `json:&amp;quot;sex&amp;quot;`
    Avatar string `json:&amp;quot;avatar&amp;quot;`
    Login_ip string `json:&amp;quot;login_ip&amp;quot;`
    Login_date *gtime.Time `json:&amp;quot;login_date&amp;quot;`
    Remark string `json:&amp;quot;remark&amp;quot;`
    Created_at *gtime.Time `json:&amp;quot;created_at&amp;quot;`
    Updated_at *gtime.Time `json:&amp;quot;updated_at&amp;quot;`
    Deleted_at *gtime.Time `json:&amp;quot;deleted_at&amp;quot;`
}

type AdminGetAllOutput struct {
    AdminAllList []AdminAll `json:&amp;quot;list&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;7.编写 logic&lt;/h3&gt;
&lt;p&gt;这个我在一开始使用的时候其实很困惑，为啥要弄这个，直接在 controller 里把这些逻辑都写在一起不就好了,不过文档中说明是在面对复杂项目上，用于封装业务。可能是我的项目太简单了吧 🦉(汗...&lt;/p&gt;
&lt;p&gt;在看过官方示例后可以可以模仿来写。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// /logic/jkmap_admin/admin.go
//记得加上init 和new方法,每个logic都需要
type sAdmin struct{}
func init() {
    service.RegisterAdmin(New())
}
func New() *sAdmin {
    return &amp;amp;sAdmin{}
}

// Hello 获得所有方法
func (s *sAdmin) GetAll(ctx context.Context) (out *model.AdminGetAllOutput, err error) {
    l := dao.JkAdmin.Ctx(ctx)
    //实例化响应结构体
    out = &amp;amp;model.AdminGetAllOutput{AdminAllList: nil}
    err = l.Where(1 &amp;gt; 0).Scan(&amp;amp;out.AdminAllList)
    return
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;9.编写 controller&lt;/h3&gt;
&lt;p&gt;在这里调用你在 logic 中写的业务方法，来实现接口。&lt;/p&gt;
&lt;h3&gt;10.在 cmd 中绑定接口&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;//像这样在 cmd.go 文件中绑定你生成的controller
group.Bind(
    //hello.NewV1(),
    jkmap_admin.NewV1(),
    //jkmap_mp.NewV1(),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行&lt;code&gt;gf run main.go&lt;/code&gt;
是不是看到自己的接口啦～&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;现在只是写了基本的用法，以后也会慢慢用也会写一些更具体的用法，一些细节之类的。&lt;/p&gt;
</description>
    <pubDate>Wed, 11 Oct 2023 12:47:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>后端</category><category>golang</category><category>goframe</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/golang/goframe开发学习系列/goframe开发学习（零）前言</guid>
    <title>goframe开发学习（零）前言</title>
    <link>https://wxmvv.github.io/blog/golang/goframe开发学习系列/goframe开发学习（零）前言</link>
    <description>&lt;p&gt;记录自己学习的过程，同时把自己的心得分享出来，如果你也和我一样刚开始接触 golang 或者 goframe，想要尽快入门使用，那么可以关注我的这些文章，肯定会有帮助的。&lt;/p&gt;
&lt;h2&gt;goframe 是什么&lt;/h2&gt;
&lt;p&gt;goframe 是一个基于 golang 的 web 框架，它的特点是集成了很多功能，比如 orm、缓存、日志、配置、定时任务、命令行、内置服务等等，而且使用起来也很简单，只需要简单的配置就可以使用。&lt;/p&gt;
&lt;h2&gt;为什么选择 goframe&lt;/h2&gt;
&lt;p&gt;我选择 goframe 的原因是因为它的功能很全面，而且使用起来也很简单，而且它的文档也很详细，基本上能想到的功能都有，而且还有很多案例，可以很快的上手。&lt;/p&gt;
&lt;h2&gt;开发工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;ApiPost(不是广告，真的蛮好用，而且是本地的)&lt;/li&gt;
&lt;li&gt;TablePlus(看数据库的，随便用哪个都行)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://goframe.org/&quot;&gt;goframe 官网&lt;/a&gt;(怎么能不看文档！)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;加油！&lt;/h2&gt;
&lt;p&gt;让我们一起努力，共同进步！&lt;/p&gt;
</description>
    <pubDate>Fri, 06 Oct 2023 12:47:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>后端</category><category>golang</category><category>goframe</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/markdown/github profile美化</guid>
    <title>github profile美化</title>
    <link>https://wxmvv.github.io/blog/markdown/github profile美化</link>
    <description>&lt;h2&gt;github profile 美化&lt;/h2&gt;
&lt;p&gt;好像是去年更新的功能，今天整理 github 文件顺便尝试一下。&lt;/p&gt;
&lt;p&gt;原理就是新建一个和你的 github 账号名一样的仓库，然后这个仓库中的 read me 就会显示在 profile 页面。&lt;/p&gt;
&lt;p&gt;这是一个 md 文件，可以使用 markdown，也可以使用 html+css 来制作样式。&lt;/p&gt;
&lt;p&gt;也有一些相关美化的项目可以用来搭配使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://skillicons.dev&quot;&gt;skillicons&lt;/a&gt; 添加小图标&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/anuraghazra/github-readme-stats&quot;&gt;github-readme-stats&lt;/a&gt; 你的 github 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好啦！快去试一下吧～(^_−)−☆&lt;/p&gt;
</description>
    <pubDate>Sun, 24 Sep 2023 14:45:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>github</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/Note/音乐分享-second-wind</guid>
    <title>音乐分享second-wind</title>
    <link>https://wxmvv.github.io/blog/Note/音乐分享-second-wind</link>
    <description>&lt;iframe src=&quot;https://open.spotify.com/embed/album/3yx7NLldcqxw39HoKLPaRG?utm_source=generator&quot; width=&quot;100%&quot; height=&quot;352&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;最近听到的非常棒的一张专辑，非常喜欢其中的曲子的 solo 部分，非常有趣，整体音色会让人很舒适放松，然后 solo 又会像小精灵一样不多不少制造一点紧张，并且完美解决，确实很棒。&lt;/p&gt;
</description>
    <pubDate>Wed, 20 Sep 2023 17:12:45 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>music</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/macos/surge个人使用配置</guid>
    <title>surge个人使用配置</title>
    <link>https://wxmvv.github.io/blog/macos/surge个人使用配置</link>
    <description>&lt;h2&gt;为什么是 surge&lt;/h2&gt;
&lt;p&gt;之前一直在用 shadowrocket，很简单，最近因为在淘宝花几块钱买了个 ios 软件用，结果发现店铺居然是用网球 app，或者圈 x 解锁，于是想研究一下。&lt;/p&gt;
&lt;p&gt;包括圈 x，loon，surge，我都用了一圈，确实是 surge 更加顺手一些。其实代理功能大家都大差不差，surge 最突出的实际上是抓数据，使用界面干净明白，简单看一下文档就上手了。还有一个重要的原因，是因为网上都说 surge 会更稳定，更省电(我持保留意见)，于是折腾一番弄出了自己的配置表，欢迎使用参考。&lt;/p&gt;
&lt;p&gt;模块的话，其实我并没开很多，只有一个必开&lt;a href=&quot;https://raw.githubusercontent.com/ExaAlice/Alice/main/Module/MitMAllHostnames.sgmodule&quot;&gt;MIITAllHost&lt;/a&gt;,这个打开后可以方便抓包，其他的可以在网上自行搜索，或者在各种电报群获取。&lt;/p&gt;
&lt;h2&gt;个人配置&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/static/file/surge.conf&quot;&gt;surge.conf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;导入后替换配置中的订阅地址即可使用&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;surge 官方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nssurge.com/support&quot;&gt;官方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.surge.community&quot;&gt;社区-入门指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://limbopro.com&quot;&gt;毒奶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blankmagic.github.io/surge/&quot;&gt;blankmagic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blackmatrix7/ios_rule_script&quot;&gt;blackmatrix7 ios-rule-script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Rabbit-Spec&quot;&gt;Rabbit-Spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模块参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.surge.community/modules&quot;&gt;社区推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/deezertidal/Surge_Module&quot;&gt;deezertidal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Yu9191/Rewrite/tree/main/Surge&quot;&gt;Yu9191&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些特殊模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sub-store-org/Sub-Store&quot;&gt;sub-store&lt;/a&gt; 订阅转换&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.boxjs.app&quot;&gt;box.js&lt;/a&gt; &lt;a href=&quot;https://github.com/chavyleung/scripts&quot;&gt;boxjs 脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VirgilClyne/iRingo&quot;&gt;iRingo&lt;/a&gt; 解锁苹果功能&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Script-Hub-Org/Script-Hub&quot;&gt;script.hub&lt;/a&gt; 脚本转换&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ExaAlice/Alice/main/Module/MitMAllHostnames.sgmodule&quot;&gt;MIITAllHost&lt;/a&gt; 抓包使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/surgioproject/surgio&quot;&gt;surgio&lt;/a&gt; 规则转换&lt;/li&gt;
&lt;/ul&gt;
</description>
    <pubDate>Sun, 03 Sep 2023 11:13:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>科学上网</category><category>surge</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/markdown/把obsidian变成IA writer(哈哈)</guid>
    <title>把obsidian变成IA writer</title>
    <link>https://wxmvv.github.io/blog/markdown/把obsidian变成IA writer(哈哈)</link>
    <description>&lt;h2&gt;随便说&lt;/h2&gt;
&lt;p&gt;用了 obsidian 好久了，真的是符合我心中电子笔记最完美样子的软件，唯一的问题就是界面太乱，所以利用闲暇时间好好整理了一下！&lt;/p&gt;
&lt;p&gt;之前用过 IA writer，真的很干净、很舒服的界面，字体也是我喜欢的，所以我们今天的目标就是把 obsidian 变成 IA writer！(obsidian:所以我只是 IA 的替身吗 😭)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/markdown/obsidian/obsidian-IA%E9%A2%84%E8%A7%88.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;换装开始！╮(￣ ▽ ￣&amp;quot;&amp;quot;)╭&lt;/h2&gt;
&lt;p&gt;首先是先大体上整理一下外表！
让我们换一个主题 - 对的没错！就是你 minimal ！(主题店常年第一名的)
虽然有直接 copy IA 的主题比如 IB，不过实际使用效果不是很理想，minimal 凭借她优秀的可调教性成为我们的选择！&lt;/p&gt;
&lt;p&gt;我们同时还需要 3 个插件配合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hider&lt;/li&gt;
&lt;li&gt;Minimal Theme Settings&lt;/li&gt;
&lt;li&gt;Style Settings&lt;/li&gt;
&lt;li&gt;Focus Active Sentence (可选)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后是 IA 的字体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iaolo/iA-Fonts&quot;&gt;IA-Fonts&lt;/a&gt; 选择你喜欢的下载并安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK！ 前期准备完成！&lt;/p&gt;
&lt;h2&gt;设置设置！&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.obsidian.md/Home&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/markdown/obsidian/%E5%A4%96%E8%A7%82%E8%AE%BE%E7%BD%AE1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-palette&quot;&gt;#00C6FF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IA 的大蓝色&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/markdown/obsidian/%E5%A4%96%E8%A7%82%E8%AE%BE%E7%BD%AE2%202.png&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;/static/images/markdown/obsidian/%E5%A4%96%E8%A7%82%E8%AE%BE%E7%BD%AE3%201.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 import 将下面的拷贝进去&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;minimal-style@@bg1@@dark&amp;quot;: &amp;quot;#191A1A&amp;quot;,
    &amp;quot;minimal-style@@bg1@@light&amp;quot;: &amp;quot;#F7F7F7&amp;quot;,
    &amp;quot;minimal-style@@ui1@@light&amp;quot;: &amp;quot;#00BEFF&amp;quot;,
    &amp;quot;minimal-style@@ax1@@dark&amp;quot;: &amp;quot;#CCCCCC&amp;quot;,
    &amp;quot;minimal-style@@ax1@@light&amp;quot;: &amp;quot;#1A1A1A&amp;quot;,
    &amp;quot;minimal-style@@ax2@@dark&amp;quot;: &amp;quot;#CCCCCC&amp;quot;,
    &amp;quot;minimal-style@@ax2@@light&amp;quot;: &amp;quot;#1A1A1A&amp;quot;,
    &amp;quot;minimal-style@@code-background@@dark&amp;quot;: &amp;quot;#252524&amp;quot;,
    &amp;quot;minimal-style@@code-background@@light&amp;quot;: &amp;quot;#EEEEEE&amp;quot;,
    &amp;quot;minimal-style@@h1-size&amp;quot;: &amp;quot;1.5em&amp;quot;,
    &amp;quot;minimal-style@@h2-size&amp;quot;: &amp;quot;1.2em&amp;quot;,
    &amp;quot;minimal-style@@h3-size&amp;quot;: &amp;quot;1.125em&amp;quot;,
    &amp;quot;minimal-style@@h3-weight&amp;quot;: 600,
    &amp;quot;minimal-style@@h3-style&amp;quot;: &amp;quot;italic&amp;quot;,
    &amp;quot;minimal-style@@active-line-on&amp;quot;: true,
    &amp;quot;minimal-style@@checkbox-shape&amp;quot;: &amp;quot;checkbox-square&amp;quot;,
    &amp;quot;minimal-style@@ribbon-style&amp;quot;: &amp;quot;ribbon-hidden&amp;quot;,
    &amp;quot;minimal-style@@bold-weight&amp;quot;: 600
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/static/images/markdown/obsidian/%E5%A4%96%E8%A7%82%E8%AE%BE%E7%BD%AE4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;新建一个 随便的名字.css 然后放在里面 并且打开就能看到啦！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.markdown-source-view.mod-cm6 .cm-content {
    /* 光标颜色 */
    caret-color: var(--ia-primary-color);
}
/*修改顶部导航栏  hover时候才显示*/
.view-header:hover {
    opacity: 1 !important;
}
.workspace-tabs.mod-stacked.mod-top .workspace-tab-header-container:hover {
    opacity: 1 !important;
}
.view-header {
    opacity: 0 !important;
}
.workspace-tabs.mod-stacked.mod-top .workspace-tab-header-container {
    opacity: 0 !important;
}
/*选中的tab 标题栏和边框颜色*/
.workspace-tab-container .workspace-tab-header {
    box-shadow: -1px 0 0 0 var(--ia-link-color), var(--tab-stacked-shadow) !important;
}
.workspace-tab-container .workspace-tab-header.mod-active.is-active {
    box-shadow: -1px 0 0 0 var(--ia-primary-color), var(--tab-stacked-shadow) !important;
}
.workspace-tab-header.mod-active.is-active .workspace-tab-header-inner-title,
.workspace-tab-header.mod-active.is-active .workspace-tab-header-inner-icon {
    color: var(--ia-primary-color) !important;
    /* font-weight:600 !important; */
}
/* 外部链接url和括号颜色 */
.cm-string.cm-url,
.cm-formatting.cm-formatting-link.cm-link,
.cm-active &amp;gt; .cm-formatting.cm-formatting-link-string.cm-string.cm-url {
    color: var(--ia-link-color) !important;
}
/* 内部链接括号颜色 */
.cm-formatting-link.cm-formatting-link-end,
.cm-formatting-link.cm-formatting-link-start {
    color: var(--ia-link-color) !important;
}
/* 选中后的外部链接url和括号颜色 */
.cm-active &amp;gt; .cm-string.cm-url {
    color: var(--ia-active-link-color) !important;
}

/* theme-dark */
.theme-dark {
    --ia-link-color: #7b7a79;
    --ia-active-link-color: #00bbff;
}
/* theme-light */
.theme-light {
    --ia-link-color: #b5b3b0;
    --ia-active-link-color: #00bbff;
}
/* theme-dark &amp;amp; theme-light */
.theme-dark,
.theme-light {
    --ia-primary-color: #00bbff;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置好了吗？是不是大变样了呢？哈哈&lt;/p&gt;
&lt;h2&gt;变装结束&lt;/h2&gt;
&lt;p&gt;还是有很多没有弄好的，比如光标宽度，选中文字颜色等，有空再折腾你啦！
╮(￣ ▽ ￣&amp;quot;&amp;quot;)╭&lt;/p&gt;
&lt;p&gt;有什么更好的建议也欢迎邮件我哦！&lt;/p&gt;
</description>
    <pubDate>Mon, 21 Aug 2023 14:34:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>obsidian</category><category>markdown</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/js/svelte以及tailwindcss使用尝试</guid>
    <title>tailwindCSS以及svelte使用尝试</title>
    <link>https://wxmvv.github.io/blog/js/svelte以及tailwindcss使用尝试</link>
    <description>&lt;h2&gt;参考文档&lt;/h2&gt;
&lt;p&gt;先看文档，tailwindCSS 真的我花了一小会时间适应了一下就可以算是入门了吧，真的太方便了，但是 svelte 则需要认真读一下文档，要不连文件怎么建都不知道... 和 vue 使用有很多相似地方，不同的地方更多，尤其是使用方法似乎变简单了，不过我也没有特别深入的使用，不好做评价。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://svelte.dev&quot;&gt;svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kit.svelte.dev&quot;&gt;svelte.kit - 最新项目都会使用 kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tailwindcss.com&quot; title=&quot;台风天&quot;&gt;tailwindCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tailwindui.com/components&quot;&gt;tailwindCSS 官方组件库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://daisyui.com&quot;&gt;DaisyUI - 基于 tailwind 的 UI 库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;我的项目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wxmvv.github.io/softwhite-homepage-svelte/&quot;&gt;softwhite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;随便说&lt;/h2&gt;
&lt;p&gt;去年了解到的 tailwindCSS 不过也没花时间去尝试，最近用了一下简直是停不下来，使用体验极为舒适，这里记录一下顺便也做下推荐。&lt;/p&gt;
&lt;p&gt;另一个 svelte，是在我看 DaisyUI 的示例项目时候，看到的框架，搜了下说是前端届一颗冉冉升起的新星，就一起用起来了。(vue 自认为用的还不是很好，也不知道哪来的勇气在这瞎试，笑)&lt;/p&gt;
&lt;p&gt;使用过程中也学到很多新的东西，或者一些踩的坑，有时间也会写下来给大家参考。&lt;/p&gt;
</description>
    <pubDate>Sun, 21 May 2023 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>前端</category><category>svelte</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/linux/Linux发行版选择</guid>
    <title>这个网站帮你选择Linux</title>
    <link>https://wxmvv.github.io/blog/linux/Linux发行版选择</link>
    <description>&lt;p&gt;&lt;a href=&quot;https://distrochooser.de/zh-hans&quot;&gt;这个网站帮你选择&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我最后选择了 debian。你呢？&lt;/p&gt;
</description>
    <pubDate>Fri, 10 Feb 2023 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>linux</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/linux/解决nvm启动速度慢的问题</guid>
    <title>解决nvm启动速度慢的问题</title>
    <link>https://wxmvv.github.io/blog/linux/解决nvm启动速度慢的问题</link>
    <description>&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot;
export PATH=$HOME/.nvm/versions/node/v18.14.0/bin/:$PATH
nvm() { . &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ; nvm $@ ; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注释掉之前添加的 nvm 启动命令&lt;/p&gt;
&lt;p&gt;然后将上面代码中的版本号改为自己想默认启动的 node，存入配置文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/e1598eb2df8e&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
</description>
    <pubDate>Fri, 10 Feb 2023 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>shell</category><category>macos</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/devtoys</guid>
    <title>Devtoys 常用开发工具</title>
    <link>https://wxmvv.github.io/blog/devtoys</link>
    <description>&lt;blockquote&gt;
&lt;p&gt;Devtoys 开发常用工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;utils&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ittoolpro.com/jwt-parser&quot;&gt;It-tools-pro&lt;/a&gt; 综合工具网站&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.iloveimg.com/zh-cn/compress-image&quot;&gt;i love img&lt;/a&gt; 图片压缩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://colorhunt.co/palettes/popular&quot;&gt;Color Hunt&lt;/a&gt; 色卡&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.toolhelper.cn/Color/RGBToHex&quot;&gt;color converter&lt;/a&gt; 颜色转换 Hex,rgba 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;icon collection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.iconfont.cn&quot;&gt;iconfont&lt;/a&gt; 阿里图标库,图标转成 font&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://curlconverter.com/python/&quot;&gt;curl-to-python&lt;/a&gt;curl 转 python&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;css&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://neumorphism.io/&quot;&gt;neumorphism&lt;/a&gt; 拟态按钮 css&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cssgradient.io&quot;&gt;cssgradient&lt;/a&gt; 渐变颜色 css&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inspiration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io&quot;&gt;codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gsap.com/showcase/&quot;&gt;gsap-showcase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    <pubDate>Sat, 03 Dec 2022 18:07:42 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>code</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/swiftUI/使用SwiftUI开发App</guid>
    <title>用SwiftUI开发APP</title>
    <link>https://wxmvv.github.io/blog/swiftUI/使用SwiftUI开发App</link>
    <description>&lt;h2&gt;做什么&lt;/h2&gt;
&lt;p&gt;经常逛 app store，对笔记/日记类的应用很感兴趣，于是决定做一个。&lt;/p&gt;
&lt;h2&gt;怎么做&lt;/h2&gt;
&lt;p&gt;搜索如何制作 ios 的应用，会有各种各样的方式，比如用框架 flutter，uniapp 之类，或者原生的 UIKit，SwiftUI，经过比较最后决定使用 SwiftUI 作为入门开发的方式。
SwiftUI 最大优势：相比同样原生的 UIKit 构建界面更方便！通过简单声明就可以实现各种效果。
当然也有不少缺点：ios 系统版本要求较高，自带组件可定制有点少等等问题。
不过作为入门来说是一个很优秀的方式，因为真的足够简单。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sspai.com/series/147&quot;&gt;sspai 的教学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;App&lt;/h2&gt;
&lt;p&gt;名称：StarlightDiary
&lt;a href=&quot;https://wxmvv.github.io/StarlightDiary/&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;开发&amp;amp;上线&lt;/h2&gt;
&lt;p&gt;断断续续弄了大概 3 个月，终于做好了。
其中也出现不少问题，不过最终也都顺利解决。
其中最浪费时间的是设计，一开始没有想好做什么样的界面，然后不断做不断改，浪费了很多时间，引以为戒。&lt;/p&gt;
&lt;h2&gt;其他事&lt;/h2&gt;
&lt;p&gt;有时间我也会把 swiftUI 相关基础知识，以及我碰到的问题和解决放在另一篇文章中，希望能有帮助。&lt;/p&gt;
</description>
    <pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>swift</category><category>swiftUI</category><category>ios</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/js/Pjax实现无刷新加载页面</guid>
    <title>Pjax实现无刷新加载页面</title>
    <link>https://wxmvv.github.io/blog/js/Pjax实现无刷新加载页面</link>
    <description>&lt;p&gt;给朋友制作网站的时候，收到一个需求，就是要无刷新完成页面切换，最好还要有过渡动画。&lt;/p&gt;
&lt;p&gt;因为是原生 js 做的网页，便想到使用 jquery 的 ajax 解决问题。
不过由于考虑到文件大小并且也并没有使用 jq 其他功能，最后决定使用了不需要引入 jq 的&lt;a href=&quot;https://github.com/MoOx/pjax&quot;&gt;pjax&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;引入&lt;a href=&quot;https://github.com/MoOx/pjax&quot;&gt;pjax&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pjax/0.2.8/pjax.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;script&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(document).ready(function () {
    var pjax = new Pjax({
        elements: &amp;quot;a&amp;quot;,
        selectors: [&amp;quot;main&amp;quot;],
        cacheBust: false,
        scrollRestoration: false,
        switches: {
            main: Pjax.switches.sideBySide,
        },
        //切换动画效果
        switchesOptions: {
            main: {
                classNames: {
                    remove: &amp;quot;Animated-easeOut Animate--noDelay&amp;quot;,
                    add: &amp;quot;Animated-easeIn&amp;quot;,
                    backward: &amp;quot;Animated-easeOut&amp;quot;,
                    forward: &amp;quot;Animated-easeOut&amp;quot;,
                },
            },
        },
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;h3&gt;script 重载&lt;/h3&gt;
&lt;h4&gt;问题:&lt;/h4&gt;
&lt;p&gt;因为 pjax 切换页面并没有完全刷新，所以页面的 js 不会从头执行一遍，导致 js 不生效。&lt;/p&gt;
&lt;h4&gt;解决:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;方式 1 - 重载部分 js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function pjax_reload() {
    //需要执行的js
}
// Pjax 完成后，重新加载上面的函数
document.addEventListener(&amp;quot;pjax:complete&amp;quot;, function () {
    pjax_reload();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方式 2 - 重载 js 文件
这种情况多数用于第三方文件，比如，卜算子统计的脚本、谷歌/百度/腾讯分析的脚本等，这些脚本在每一次页面加载后都需要执行。
在引入这些文件的标签上添加 data-pjax 属性，然后将具有这个属性的标签重新添加在页面中。有时候不方便在这些标签上添加额外的属性，那么你可以在这些标签外套一层标签，如&lt;code&gt;&amp;lt;div class=&amp;quot;.pjax-reload&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;，然后将 .pjax-reload 里的元素全部重新添加到页面中即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script data-pjax src=&amp;quot;https://cdn.jsdelivr.net/gh/sukkaw/busuanzi/bsz.pure.mini.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div class=&amp;quot;.pjax-reload&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://www.google-analytics.com/analytics.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// jQuery 写法
$(&amp;quot;script[data-pjax], .pjax-reload script&amp;quot;).each(function () {
    $(this).parent().append($(this).remove());
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://liuyib.github.io/2019/09/24/use-pjax-to-your-site/#:~:text=%E9%87%8D%E8%BD%BD%20JS%20%E8%84%9A%E6%9C%AC%201%20%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%8F%98%E9%83%A8%E5%88%86%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BA%8B%E4%BB%B6%20%E6%AF%94%E5%A6%82%EF%BC%8C%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E6%A0%8F%E6%9C%89%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E6%8C%89%E9%92%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B9%8B%E5%90%8E%E4%BC%9A%E5%BC%B9%E5%87%BA%E6%90%9C%E7%B4%A2%E6%A1%86%EF%BC%9A%20%E7%94%B1%E4%BA%8E%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E6%A0%8F%E4%B8%8D%E5%8F%98%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%B6%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8A%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%BF%99%E9%83%A8%E5%88%86%E5%85%83%E7%B4%A0%E5%AF%B9%E5%BA%94%E7%9A%84%20JS,%E4%BA%8B%E4%BB%B6%E4%B8%8D%E9%9C%80%E8%A6%81%E9%87%8D%E8%BD%BD%E3%80%82%202%20%E9%A1%B5%E9%9D%A2%E5%8F%AF%E5%8F%98%E9%83%A8%E5%88%86%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BA%8B%E4%BB%B6%20%E6%AF%94%E5%A6%82%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%BB%E4%BD%93%E9%83%A8%E5%88%86%E6%98%AF%E5%8F%98%E5%8C%96%E7%9A%84%EF%BC%8C%E6%87%92%E5%8A%A0%E8%BD%BD%E5%85%B6%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%EF%BC%9A%20%E5%BD%93%E9%80%9A%E8%BF%87%20Pjax%20%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2%E5%90%8E%EF%BC%8C%E7%94%B1%E4%BA%8E%E4%B8%BB%E4%BD%93%E9%83%A8%E5%88%86%E6%94%B9%E5%8F%98%EF%BC%8C%E4%B8%8A%E8%BF%B0%E4%BB%A3%E7%A0%81%E5%B7%B2%E7%BB%8F%E5%A4%B1%E6%95%88%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E9%87%8D%E8%BD%BD%E3%80%82%20%E4%B8%BA%E4%BA%86%E6%96%B9%E4%BE%BF%E4%BD%BF%E7%94%A8%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%8B%EF%BC%9A&quot;&gt;pjax 使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MoOx/pjax&quot;&gt;pjax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    <pubDate>Sat, 05 Dec 2020 00:00:00 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>pjax</category><category>js</category>
  </item>

  <item>
    <guid>https://wxmvv.github.io/blog/markdown/hexo部署</guid>
    <title>hexo部署静态博客</title>
    <link>https://wxmvv.github.io/blog/markdown/hexo部署</link>
    <description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近购买下载了 IA writer，确实是一个十分干净的 md 编辑器，能激发自己写字的欲望。于是考虑重新开始博客部署。翻出了以前的 hexo 博客（大概 18 年部署的一直没更新，并且原来的设置文件都丢失了），整理一下重新部署。&lt;/p&gt;
&lt;h2&gt;安装 hexo 和 cactus 主题&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;hexo&lt;/a&gt;
&lt;a href=&quot;https://github.com/probberechts/hexo-theme-cactus&quot;&gt;cactus&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;hexo 安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install hexo-cli -g
hexo init blog
cd blog
npm install
hexo server   #启动服务
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;cactus 主题安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd blog
git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置文件参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;hexo 文档&lt;/a&gt;
&lt;a href=&quot;https://github.com/probberechts/hexo-theme-cactus&quot;&gt;cactus 主题&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;hexo new 文件名
hexo clean 或 hexo c 清除缓存
hexo generate 或 hexo g 生成静态文件
hexo server 或 hexo s 本地查看
hexo deploy 或 hexo d 上传&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/probberechts/hexo-theme-cactus&quot;&gt;cactus 主题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    <pubDate>Tue, 03 Nov 2020 18:47:39 GMT</pubDate>
    <author>w05172075@outlook.com (wxm)</author>
    <category>markdown</category><category>hexo</category>
  </item>

    </channel>
  </rss>
